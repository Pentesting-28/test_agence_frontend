{"ast":null,"code":"import VueApexCharts from \"vue-apexcharts\";\nimport moment from 'moment';\nimport 'moment/locale/es';\nexport default {\n  components: {\n    apexchart: VueApexCharts\n  },\n  props: ['parentData'],\n  data: () => ({\n    dataGraph: [],\n    chartOptions: {\n      chart: {\n        height: 350,\n        type: 'line',\n        stacked: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        width: [1, 1, 4]\n      },\n      title: {\n        text: 'Performance comercial',\n        align: 'left',\n        offsetX: 110\n      },\n      xaxis: {\n        categories: moment.months()\n      },\n      yaxis: [{\n        axisTicks: {\n          show: true\n        },\n        axisBorder: {\n          show: true,\n          color: '#008FFB'\n        },\n        labels: {\n          style: {\n            colors: '#008FFB'\n          }\n        },\n        title: {\n          text: \"Income (thousand crores)\",\n          style: {\n            color: '#008FFB'\n          }\n        },\n        tooltip: {\n          enabled: true\n        },\n        max: 130.000\n      }, {\n        max: 130.000,\n        seriesName: 'Revenue',\n        opposite: true,\n        axisTicks: {\n          show: true\n        },\n        axisBorder: {\n          show: true,\n          color: '#FEB019'\n        },\n        labels: {\n          style: {\n            colors: '#FEB019'\n          }\n        },\n        title: {\n          text: \"Revenue (thousand crores)\",\n          style: {\n            color: '#FEB019'\n          }\n        }\n      }],\n      tooltip: {\n        fixed: {\n          enabled: true,\n          position: 'topLeft',\n          // topRight, topLeft, bottomRight, bottomLeft\n          offsetY: 30,\n          offsetX: 60\n        },\n        y: {\n          formatter: function (val) {\n            return \"$ \" + val;\n            /*+ \"thousands\"*/\n          }\n        }\n      },\n      legend: {\n        horizontalAlign: 'center',\n        offsetX: 40\n      }\n    }\n  }),\n  watch: {\n    parentData() {\n      if (this.parentData.length > 0) {\n        this.netEarnings();\n      } else {\n        this.dataGraph = [];\n        this.$emit(\"resetComponentValue\", '');\n      }\n    }\n\n  },\n\n  created() {\n    this.netEarnings();\n  },\n\n  methods: {\n    async netEarnings() {\n      const itemConsultants = this.parentData.map(v => {\n        return v.co_usuario;\n      });\n      const request = {\n        item_consultants: itemConsultants\n      };\n\n      try {\n        const response = await this.$store.dispatch(\"consultant/CONSULTANT_NET_EARNINGS\", request); //response service\n\n        const dataConsultan = response.data;\n        const listSelect = this.parentData;\n        const organizedData = dataConsultan.reduce(function (acumulador, valorActual) {\n          const name = listSelect.find(consultant => {\n            return consultant.co_usuario === valorActual.co_usuario;\n          });\n          let valorActualAssignName = Object.assign({\n            name: name.no_usuario\n          }, valorActual);\n          acumulador[valorActual.co_usuario] = acumulador[valorActualAssignName.co_usuario] || [];\n          acumulador[valorActual.co_usuario].push(valorActualAssignName);\n          return acumulador;\n        }, Object.create(null));\n        let ObjectBar = [];\n        let sumTotal = 0;\n        let countMaxMonth = 0;\n\n        for (let key in organizedData) {\n          let earningsData = [];\n          moment.months().map(month => {\n            let searchMonth = organizedData[key].find(index => {\n              let monthActual = parseInt(moment(index.month).format('M'));\n\n              if (monthActual > countMaxMonth) {\n                countMaxMonth = monthActual;\n              }\n\n              return month == moment(index.month).format('MMMM');\n            });\n\n            if (searchMonth != undefined) {\n              earningsData.push(this.numFormat(searchMonth.total_net_earnings));\n            } else {\n              earningsData.push(0);\n            }\n          });\n          let dataPrepare = {\n            name: organizedData[key][0].name,\n            type: 'column',\n            data: earningsData\n          };\n          ObjectBar.push(dataPrepare);\n          sumTotal += this.finalOperation(organizedData[key], 'fixed_cost');\n        }\n\n        let totalConsultant = Object.keys(organizedData).length;\n        let resulAverage = sumTotal / totalConsultant;\n        let average = Array(countMaxMonth).fill(this.numFormat(resulAverage));\n        ObjectBar.push({\n          name: 'Promedio',\n          type: 'line',\n          data: average\n        });\n        this.$refs.radar.updateOptions({\n          xaxis: {\n            categories: moment.months().slice(0, countMaxMonth)\n          }\n        });\n        this.dataGraph = ObjectBar;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    finalOperation(arrayObjectcs, key, type = true) {\n      if (!Array.isArray(arrayObjectcs)) {\n        return null;\n      }\n\n      let j = 1;\n      let total = arrayObjectcs[0][key];\n\n      if (!total) {\n        return 0;\n      }\n\n      while (j < arrayObjectcs.length) {\n        if (type) {\n          total += arrayObjectcs[j][key];\n        } else {\n          total -= arrayObjectcs[j][key];\n        }\n\n        j++;\n      }\n\n      return total;\n    },\n\n    numFormat(item) {\n      return parseFloat(new Intl.NumberFormat('de-DE').format(item.toFixed(2)));\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA6BA;AACA;AACA;AAEA;EACAA;IACAC;EADA,CADA;EAIAC,qBAJA;EAKAC;IACAC,aADA;IAEAC;MACAC;QACAC,WADA;QAEAC,YAFA;QAGAC;MAHA,CADA;MAMAC;QACAC;MADA,CANA;MASAC;QACAC;MADA,CATA;MAYAC;QACAC,6BADA;QAEAC,aAFA;QAGAC;MAHA,CAZA;MAiBAC;QACAC;MADA,CAjBA;MAoBAC,QACA;QACAC;UACAC;QADA,CADA;QAIAC;UACAD,UADA;UAEAE;QAFA,CAJA;QAQAC;UACAC;YACAC;UADA;QADA,CARA;QAcAb;UACAC,gCADA;UAEAW;YACAF;UADA;QAFA,CAdA;QAoBAI;UACAjB;QADA,CApBA;QAuBAkB;MAvBA,CADA,EA0BA;QACAA,YADA;QAEAC,qBAFA;QAGAC,cAHA;QAIAV;UACAC;QADA,CAJA;QAOAC;UACAD,UADA;UAEAE;QAFA,CAPA;QAWAC;UACAC;YACAC;UADA;QADA,CAXA;QAgBAb;UACAC,iCADA;UAEAW;YACAF;UADA;QAFA;MAhBA,CA1BA,CApBA;MAsEAI;QACAI;UACArB,aADA;UAEAsB,mBAFA;UAEA;UACAC,WAHA;UAIAjB;QAJA,CADA;QAOAkB;UACAC;YACA;YAAA;UACA;QAHA;MAPA,CAtEA;MAmFAC;QACAC,yBADA;QAEArB;MAFA;IAnFA;EAFA,EALA;EAgGAsB;IACAC;MACA;QACA;MACA,CAFA,MAGA;QACA;QACA;MACA;IACA;;EATA,CAhGA;;EA2GAC;IACA;EACA,CA7GA;;EA8GAC;IACA;MAEA;QACA;MACA,CAFA;MAIA;QACAC;MADA;;MAIA;QACA,2FADA,CACA;;QAEA;QAEA;QAEA,8EACA;UACA;YACA;UACA,CAFA;UAIA;YAAAC;UAAA;UAEAC;UACAA;UAEA;QAEA,CAbA,EAaAC,mBAbA;QAeA;QACA;QACA;;QAEA,+BACA;UACA;UAEAC;YAEA;cAEA;;cAEA,iCACA;gBACAC;cACA;;cAEA;YACA,CAVA;;YAYA,8BACA;cACAC;YACA,CAHA,MAIA;cACAA;YACA;UACA,CArBA;UAsBA;YACAL,gCADA;YAEApC,cAFA;YAGAL;UAHA;UAMA+C;UAEAC;QAEA;;QAEA;QACA;QACA;QAEAD;UACAN,gBADA;UAEApC,YAFA;UAGAL;QAHA;QAMA;UACAe;YACAC;UADA;QADA;QAMA;MAEA,CAlFA,CAkFA;QACAiC;MACA;IACA,CAhGA;;IAiGAC;MAEA;QACA;MACA;;MAEA;MACA;;MAEA;QACA;MACA;;MAEA;QACA;UACAC;QACA,CAFA,MAGA;UACAA;QACA;;QACAC;MACA;;MACA;IACA,CAxHA;;IAyHAC;MACA;IACA;;EA3HA;AA9GA","names":["components","apexchart","props","data","dataGraph","chartOptions","chart","height","type","stacked","dataLabels","enabled","stroke","width","title","text","align","offsetX","xaxis","categories","yaxis","axisTicks","show","axisBorder","color","labels","style","colors","tooltip","max","seriesName","opposite","fixed","position","offsetY","y","formatter","legend","horizontalAlign","watch","parentData","created","methods","item_consultants","name","acumulador","Object","moment","countMaxMonth","earningsData","ObjectBar","sumTotal","console","finalOperation","total","j","numFormat"],"sourceRoot":"src/components","sources":["GraphBar.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <v-card\r\n        outlined\r\n        max-width=\"1000\"\r\n        class=\"pt-3 mx-auto\"\r\n      >\r\n        <!-- <apexchart \r\n          type=\"bar\"\r\n          height=\"350\" \r\n          :options=\"chartOptions\" \r\n          :series=\"dataGraph\"\r\n          class=\"pt-3 mx-auto\"\r\n        >\r\n        </apexchart> -->\r\n        <apexchart\r\n          type=\"line\"\r\n          height=\"350\"\r\n          ref=\"radar\"\r\n          :options=\"chartOptions\"\r\n          :series=\"dataGraph\">\r\n        </apexchart>\r\n\r\n      </v-card>\r\n    \r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport VueApexCharts from \"vue-apexcharts\";\r\nimport moment from 'moment';\r\nimport 'moment/locale/es';\r\n\r\nexport default {\r\n  components: {\r\n    apexchart: VueApexCharts\r\n  },\r\n  props: ['parentData'],\r\n  data: () => ({\r\n    dataGraph : [],\r\n    chartOptions: {\r\n      chart: {\r\n        height: 350,\r\n        type: 'line',\r\n        stacked: false\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        width: [1, 1, 4]\r\n      },\r\n      title: {\r\n        text: 'Performance comercial',\r\n        align: 'left',\r\n        offsetX: 110\r\n      },\r\n      xaxis: {\r\n        categories: moment.months(),\r\n      },\r\n      yaxis: [\r\n        {\r\n          axisTicks: {\r\n            show: true,\r\n          },\r\n          axisBorder: {\r\n            show: true,\r\n            color: '#008FFB'\r\n          },\r\n          labels: {\r\n            style: {\r\n              colors: '#008FFB',\r\n            },\r\n            \r\n          },\r\n          title: {\r\n            text: \"Income (thousand crores)\",\r\n            style: {\r\n              color: '#008FFB',\r\n            }\r\n          },\r\n          tooltip: {\r\n            enabled: true\r\n          },\r\n          max: 130.000,\r\n        },\r\n        {\r\n          max: 130.000,\r\n          seriesName: 'Revenue',\r\n          opposite: true,\r\n          axisTicks: {\r\n            show: true,\r\n          },\r\n          axisBorder: {\r\n            show: true,\r\n            color: '#FEB019'\r\n          },\r\n          labels: {\r\n            style: {\r\n              colors: '#FEB019',\r\n            },\r\n          },\r\n          title: {\r\n            text: \"Revenue (thousand crores)\",\r\n            style: {\r\n              color: '#FEB019',\r\n            }\r\n          }\r\n        },\r\n      ],\r\n      tooltip: {\r\n        fixed: {\r\n          enabled: true,\r\n          position: 'topLeft', // topRight, topLeft, bottomRight, bottomLeft\r\n          offsetY: 30,\r\n          offsetX: 60\r\n        },\r\n        y:{\r\n          formatter: function (val) {\r\n            return \"$ \" + val /*+ \"thousands\"*/\r\n          }\r\n        }\r\n      },\r\n      legend: {\r\n        horizontalAlign: 'center',\r\n        offsetX: 40\r\n      }\r\n    },\r\n }),\r\n watch:{\r\n  parentData(){\r\n    if(this.parentData.length > 0) {\r\n      this.netEarnings();\r\n    }\r\n    else{\r\n      this.dataGraph = [];\r\n      this.$emit(\"resetComponentValue\", '');\r\n    }\r\n  }\r\n},\r\ncreated() {\r\n  this.netEarnings()\r\n},\r\n methods: {\r\n  async netEarnings(){\r\n    \r\n      const itemConsultants = this.parentData.map((v) => {\r\n          return v.co_usuario\r\n      });\r\n\r\n      const request = {\r\n        item_consultants: itemConsultants\r\n      };\r\n\r\n      try {\r\n        const response = await this.$store.dispatch(\"consultant/CONSULTANT_NET_EARNINGS\", request);//response service\r\n        \r\n        const dataConsultan = response.data;\r\n\r\n        const listSelect = this.parentData;\r\n\r\n        const organizedData = dataConsultan.reduce(function (acumulador, valorActual)\r\n        {\r\n          const name = listSelect.find((consultant) => { \r\n            return consultant.co_usuario === valorActual.co_usuario;\r\n          });\r\n\r\n          let valorActualAssignName = Object.assign({name:name.no_usuario}, valorActual);\r\n\r\n          acumulador[valorActual.co_usuario] = acumulador[valorActualAssignName.co_usuario] || [];\r\n          acumulador[valorActual.co_usuario].push(valorActualAssignName); \r\n          \r\n          return acumulador;\r\n\r\n        }, Object.create(null));\r\n\r\n        let ObjectBar = [];\r\n        let sumTotal = 0;\r\n        let countMaxMonth = 0;\r\n\r\n        for (let key in organizedData)\r\n        {\r\n          let earningsData = [];\r\n\r\n          moment.months().map((month) => {\r\n\r\n            let searchMonth = organizedData[key].find((index) => {\r\n\r\n              let monthActual = parseInt(moment(index.month).format('M'));\r\n\r\n              if(monthActual > countMaxMonth)\r\n              {\r\n                countMaxMonth = monthActual;\r\n              }\r\n\r\n              return month == moment(index.month).format('MMMM')\r\n            })\r\n\r\n            if(searchMonth != undefined)\r\n            {\r\n              earningsData.push(this.numFormat(searchMonth.total_net_earnings));\r\n            }\r\n            else{\r\n              earningsData.push(0);\r\n            }\r\n          });\r\n          let dataPrepare = {\r\n            name: organizedData[key][0].name,\r\n            type: 'column',\r\n            data: earningsData\r\n          }\r\n\r\n          ObjectBar.push(dataPrepare);\r\n\r\n          sumTotal += this.finalOperation(organizedData[key],'fixed_cost');\r\n\r\n        }\r\n\r\n        let totalConsultant = Object.keys(organizedData).length;\r\n        let resulAverage = sumTotal / totalConsultant;\r\n        let average = Array(countMaxMonth).fill(this.numFormat(resulAverage));\r\n\r\n        ObjectBar.push({\r\n          name: 'Promedio',\r\n          type: 'line',\r\n          data: average\r\n        });\r\n\r\n        this.$refs.radar.updateOptions({\r\n          xaxis:{\r\n            categories: moment.months().slice(0, countMaxMonth)\r\n          }\r\n        });\r\n\r\n        this.dataGraph = ObjectBar;\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    },\r\n    finalOperation(arrayObjectcs, key, type = true) {\r\n\r\n      if(!Array.isArray(arrayObjectcs)){\r\n        return null;\r\n      }\r\n\r\n      let j = 1;\r\n      let total = arrayObjectcs[0][key];\r\n\r\n      if(!total){\r\n        return 0;\r\n      }\r\n\r\n      while (j< arrayObjectcs.length) {\r\n        if(type){\r\n          total += arrayObjectcs[j][key];\r\n        }\r\n        else{\r\n          total -= arrayObjectcs[j][key];\r\n        }\r\n        j++;\r\n      }\r\n      return total;\r\n    },\r\n    numFormat(item) {\r\n      return parseFloat(new Intl.NumberFormat('de-DE').format(item.toFixed(2)));\r\n    },\r\n },\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n  tspan{\r\n    text-transform: capitalize !important;\r\n  }\r\n</style>"]},"metadata":{},"sourceType":"module"}