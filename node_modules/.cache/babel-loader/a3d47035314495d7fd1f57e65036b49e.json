{"ast":null,"code":"import VueApexCharts from \"vue-apexcharts\";\nimport moment from 'moment';\nimport 'moment/locale/es';\nimport { formatMonth } from \"../assets/util/util\";\nimport { calculationsOfAmounts } from \"../assets/util/util\";\nimport { formatAmounts } from \"../assets/util/util\";\nimport { organizeByConsultants } from \"../assets/util/util\";\nimport { alertDinamic } from \"../assets/util/util\";\nexport default {\n  components: {\n    apexchart: VueApexCharts\n  },\n  props: ['parentData'],\n  data: () => ({\n    series: [],\n    loading: false,\n    chartOptions: {\n      chart: {\n        height: 350,\n        type: 'line',\n        stacked: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        width: [1, 1, 4]\n      },\n      title: {\n        text: 'R$ Performance comercial',\n        align: 'left',\n        offsetX: 110\n      },\n      xaxis: {\n        categories: []\n      },\n      yaxis: [{\n        axisTicks: {\n          show: true\n        },\n        axisBorder: {\n          show: true,\n          color: '#008FFB'\n        },\n        labels: {\n          style: {\n            colors: '#008FFB'\n          }\n        },\n        title: {\n          text: 'R$ Performance comercial',\n          style: {\n            color: '#008FFB'\n          }\n        },\n        tooltip: {\n          enabled: true\n        },\n        max: 130.000\n      }],\n      tooltip: {\n        fixed: {\n          enabled: true,\n          position: 'topLeft',\n          offsetY: 30,\n          offsetX: 60\n        },\n        y: {\n          formatter: function (val) {\n            return \"$ \" + val;\n          }\n        }\n      },\n      legend: {\n        horizontalAlign: 'left',\n        offsetX: 40\n      }\n    }\n  }),\n  watch: {\n    parentData() {\n      if (this.parentData.length > 0) {\n        this.initialize();\n      } else {\n        this.$emit(\"resetComponentValue\", '');\n      }\n    },\n\n    loading(val) {\n      if (!val) return;\n      setTimeout(() => this.loading = false, 10000);\n    }\n\n  },\n\n  created() {\n    this.initialize();\n  },\n\n  mounted() {\n    organizeByConsultants;\n    formatMonth;\n    calculationsOfAmounts;\n    formatAmounts;\n    alertDinamic;\n  },\n\n  methods: {\n    async initialize() {\n      const itemConsultants = this.parentData.map(item => {\n        return item.co_usuario;\n      });\n      const request = {\n        item_consultants: itemConsultants\n      };\n\n      try {\n        this.loading = true;\n        const response = await this.$store.dispatch(\"consultant/CONSULTANT_NET_EARNINGS_FIXED_COST\", request); //response service\n\n        let dataOrganizeConsultant = [];\n        const dataConsultan = response.data;\n        const sizeData = dataConsultan.length;\n\n        if (sizeData > 0) {\n          const itemsSelect = this.parentData;\n          dataOrganizeConsultant = organizeByConsultants(dataConsultan, itemsSelect);\n          let ObjectBar = [];\n          let sumTotal = 0;\n          let countMaxMonth = 0;\n\n          for (const j in dataOrganizeConsultant) {\n            let earningsData = [];\n            moment.months().map(month => {\n              let searchMonth = dataOrganizeConsultant[j].find(index => {\n                let monthActual = parseInt(moment(index.month).format('M'));\n\n                if (monthActual > countMaxMonth) {\n                  countMaxMonth = monthActual;\n                }\n\n                return month == moment(index.month).format('MMMM');\n              });\n\n              if (searchMonth != undefined) {\n                earningsData.push(formatAmounts(searchMonth.total_net_earnings));\n              } else {\n                earningsData.push(0);\n              }\n            });\n            let dataPrepare = {\n              name: dataOrganizeConsultant[j][0].name,\n              type: 'column',\n              data: earningsData\n            };\n            ObjectBar.push(dataPrepare);\n            sumTotal += calculationsOfAmounts(dataOrganizeConsultant[j], 'fixed_cost');\n          }\n\n          let totalConsultant = Object.keys(dataOrganizeConsultant).length;\n          let resulAverage = sumTotal / totalConsultant;\n          let average = Array(countMaxMonth).fill(formatAmounts(resulAverage));\n          ObjectBar.push({\n            name: 'Promedio',\n            type: 'line',\n            data: average\n          });\n          this.loading = false;\n          this.$refs.radar.updateOptions({\n            series: ObjectBar,\n            xaxis: {\n              categories: ['enero', 'febrero', 'marzo', 'abril', 'mayo']\n            }\n          });\n          alertDinamic('success', 'Éxito', 'Registros encontrados con éxito.');\n        } else {\n          alertDinamic('error', 'Error', 'No posee registros.');\n          this.$emit(\"resetComponentValue\", '');\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    organizeByConsultants,\n    formatMonth,\n    calculationsOfAmounts,\n    formatAmounts,\n    alertDinamic\n  }\n};","map":{"version":3,"mappings":"AAyBA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;EACAA;IACAC;EADA,CADA;EAIAC,qBAJA;EAKAC;IACAC,UADA;IAEAC,cAFA;IAGAC;MACAC;QACAC,WADA;QAEAC,YAFA;QAGAC;MAHA,CADA;MAMAC;QACAC;MADA,CANA;MASAC;QACAC;MADA,CATA;MAYAC;QACAC,gCADA;QAEAC,aAFA;QAGAC;MAHA,CAZA;MAiBAC;QACAC;MADA,CAjBA;MAoBAC,QACA;QACAC;UACAC;QADA,CADA;QAIAC;UACAD,UADA;UAEAE;QAFA,CAJA;QAQAC;UACAC;YACAC;UADA;QADA,CARA;QAcAb;UACAC,gCADA;UAEAW;YACAF;UADA;QAFA,CAdA;QAoBAI;UACAjB;QADA,CApBA;QAuBAkB;MAvBA,CADA,CApBA;MA+CAD;QACAE;UACAnB,aADA;UAEAoB,mBAFA;UAGAC,WAHA;UAIAf;QAJA,CADA;QAOAgB;UACAC;YACA;UACA;QAHA;MAPA,CA/CA;MA4DAC;QACAC,uBADA;QAEAnB;MAFA;IA5DA;EAHA,EALA;EA0EAoB;IACAC;MACA;QACA;MACA,CAFA,MAGA;QACA;MACA;IACA,CARA;;IASAlC;MACA;MACAmC;IACA;;EAZA,CA1EA;;EAwFAC;IACA;EACA,CA1FA;;EA2FAC;IACAC;IACAC;IACAC;IACAC;IACAC;EACA,CAjGA;;EAkGAC;IACA;MACA;QACA;MACA,CAFA;MAIA;QACAC;MADA;;MAIA;QACA;QACA,sGAFA,CAEA;;QAEA;QAEA;QACA;;QAEA;UAEA;UACAC;UAEA;UACA;UACA;;UAEA;YAEA;YAEAC;cAEA;gBAEA;;gBAEA;kBACAC;gBACA;;gBAEA;cACA,CATA;;cAWA;gBACAC;cACA,CAFA,MAGA;gBACAA;cACA;YACA,CAnBA;YAqBA;cACAC,uCADA;cAEA7C,cAFA;cAGAN;YAHA;YAMAoD;YAEAC;UACA;;UAEA;UACA;UACA;UAEAD;YACAD,gBADA;YAEA7C,YAFA;YAGAN;UAHA;UAMA;UAEA;YACAC,iBADA;YAEAe;cACAC;YADA;UAFA;UAMA2B;QACA,CAhEA,MAiEA;UACAA;UACA;QACA;MACA,CA9EA,CA8EA;QACAU;MACA;IACA,CA3FA;;IA4FAd,qBA5FA;IA6FAC,WA7FA;IA8FAC,qBA9FA;IA+FAC,aA/FA;IAgGAC;EAhGA;AAlGA","names":["components","apexchart","props","data","series","loading","chartOptions","chart","height","type","stacked","dataLabels","enabled","stroke","width","title","text","align","offsetX","xaxis","categories","yaxis","axisTicks","show","axisBorder","color","labels","style","colors","tooltip","max","fixed","position","offsetY","y","formatter","legend","horizontalAlign","watch","parentData","setTimeout","created","mounted","organizeByConsultants","formatMonth","calculationsOfAmounts","formatAmounts","alertDinamic","methods","item_consultants","dataOrganizeConsultant","moment","countMaxMonth","earningsData","name","ObjectBar","sumTotal","console"],"sourceRoot":"src/components","sources":["GraphBar.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <v-card \r\n      outlined\r\n      class=\"my-4 mx-auto border border-secondary\"\r\n    >\r\n      <v-progress-linear\r\n        :active=\"loading\"\r\n        :indeterminate=\"loading\"\r\n        absolute\r\n        color=\"deep-purple accent-4\"\r\n      ></v-progress-linear>\r\n      <apexchart\r\n        type=\"line\"\r\n        height=\"350\"\r\n        ref=\"radar\"\r\n        v-if=\"loading === false\"\r\n        :options=\"chartOptions\"\r\n        :series=\"series\">\r\n      </apexchart>\r\n    </v-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport VueApexCharts from \"vue-apexcharts\";\r\n\r\nimport moment from 'moment';\r\nimport 'moment/locale/es';\r\n\r\nimport { formatMonth } from \"../assets/util/util\"\r\nimport { calculationsOfAmounts } from \"../assets/util/util\"\r\nimport { formatAmounts } from \"../assets/util/util\"\r\nimport { organizeByConsultants } from \"../assets/util/util\"\r\nimport { alertDinamic } from \"../assets/util/util\";\r\n\r\nexport default {\r\n  components: {\r\n    apexchart: VueApexCharts\r\n  },\r\n  props: ['parentData'],\r\n  data: () => ({\r\n    series : [],\r\n    loading: false,\r\n    chartOptions: {\r\n      chart: {\r\n        height: 350,\r\n        type: 'line',\r\n        stacked: false\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        width: [1, 1, 4]\r\n      },\r\n      title: {\r\n        text: 'R$ Performance comercial',\r\n        align: 'left',\r\n        offsetX: 110\r\n      },\r\n      xaxis: {\r\n        categories: [],\r\n      },\r\n      yaxis: [\r\n        {\r\n          axisTicks: {\r\n            show: true,\r\n          },\r\n          axisBorder: {\r\n            show: true,\r\n            color: '#008FFB'\r\n          },\r\n          labels: {\r\n            style: {\r\n              colors: '#008FFB',\r\n            },\r\n            \r\n          },\r\n          title: {\r\n            text: 'R$ Performance comercial',\r\n            style: {\r\n              color: '#008FFB',\r\n            }\r\n          },\r\n          tooltip: {\r\n            enabled: true\r\n          },\r\n          max: 130.000,\r\n        },\r\n      ],\r\n      tooltip: {\r\n        fixed: {\r\n          enabled: true,\r\n          position: 'topLeft',\r\n          offsetY: 30,\r\n          offsetX: 60\r\n        },\r\n        y:{\r\n          formatter: function (val) {\r\n            return \"$ \" + val\r\n          }\r\n        }\r\n      },\r\n      legend: {\r\n        horizontalAlign: 'left',\r\n        offsetX: 40\r\n      }\r\n    },\r\n }),\r\n watch:{\r\n  parentData(){\r\n    if(this.parentData.length > 0) {\r\n      this.initialize();\r\n    }\r\n    else{\r\n      this.$emit(\"resetComponentValue\", '');\r\n    }\r\n  },\r\n  loading (val) {\r\n    if (!val) return\r\n    setTimeout(() => (this.loading = false), 10000)\r\n  },\r\n},\r\ncreated() {\r\n  this.initialize();\r\n},\r\nmounted(){\r\n  organizeByConsultants;\r\n  formatMonth;\r\n  calculationsOfAmounts;\r\n  formatAmounts;\r\n  alertDinamic;\r\n},\r\nmethods: {\r\n  async initialize(){\r\n    const itemConsultants = this.parentData.map((item) => {\r\n      return item.co_usuario;\r\n    });\r\n\r\n    const request = {\r\n      item_consultants: itemConsultants\r\n    };\r\n\r\n    try {\r\n      this.loading = true;\r\n      const response = await this.$store.dispatch(\"consultant/CONSULTANT_NET_EARNINGS_FIXED_COST\", request);//response service\r\n    \r\n      let dataOrganizeConsultant = [];\r\n      \r\n      const dataConsultan = response.data;\r\n      const sizeData = dataConsultan.length;\r\n\r\n      if(sizeData > 0){\r\n        \r\n        const itemsSelect = this.parentData;\r\n        dataOrganizeConsultant = organizeByConsultants(dataConsultan, itemsSelect);\r\n\r\n        let ObjectBar = [];\r\n        let sumTotal = 0;\r\n        let countMaxMonth = 0;\r\n\r\n        for (const j in dataOrganizeConsultant) {\r\n\r\n          let earningsData = [];\r\n\r\n          moment.months().map((month) => {\r\n\r\n            let searchMonth = dataOrganizeConsultant[j].find((index) => {\r\n\r\n              let monthActual = parseInt(moment(index.month).format('M'));\r\n\r\n              if(monthActual > countMaxMonth){\r\n                countMaxMonth = monthActual;\r\n              }\r\n\r\n              return month == moment(index.month).format('MMMM')\r\n            });\r\n\r\n            if(searchMonth != undefined){\r\n              earningsData.push(formatAmounts(searchMonth.total_net_earnings));\r\n            }\r\n            else{\r\n              earningsData.push(0);\r\n            }\r\n          });\r\n\r\n          let dataPrepare = {\r\n            name: dataOrganizeConsultant[j][0].name,\r\n            type: 'column',\r\n            data: earningsData\r\n          }\r\n\r\n          ObjectBar.push(dataPrepare);\r\n\r\n          sumTotal += calculationsOfAmounts(dataOrganizeConsultant[j],'fixed_cost');\r\n        }\r\n\r\n        let totalConsultant = Object.keys(dataOrganizeConsultant).length;\r\n        let resulAverage = sumTotal / totalConsultant;\r\n        let average = Array(countMaxMonth).fill(formatAmounts(resulAverage));\r\n\r\n        ObjectBar.push({\r\n          name: 'Promedio',\r\n          type: 'line',\r\n          data: average\r\n        });\r\n\r\n        this.loading = false;\r\n\r\n        this.$refs.radar.updateOptions({\r\n          series: ObjectBar,\r\n          xaxis:{\r\n            categories: ['enero', 'febrero', 'marzo', 'abril', 'mayo']\r\n          }\r\n        });\r\n        alertDinamic('success', 'Éxito','Registros encontrados con éxito.');\r\n      }\r\n      else{\r\n        alertDinamic('error', 'Error', 'No posee registros.');\r\n        this.$emit(\"resetComponentValue\", '');\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  },\r\n  organizeByConsultants,\r\n  formatMonth,\r\n  calculationsOfAmounts,\r\n  formatAmounts,\r\n  alertDinamic\r\n },\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}