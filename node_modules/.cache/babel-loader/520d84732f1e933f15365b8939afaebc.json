{"ast":null,"code":"import VueApexCharts from \"vue-apexcharts\";\nexport default {\n  props: ['parentData'],\n  components: {\n    apexchart: VueApexCharts\n  },\n  data: () => ({\n    series: [44, 55, 13, 43, 22],\n    chartOptions: {\n      chart: {\n        width: 380,\n        type: 'pie'\n      },\n      labels: ['Team A', 'Team B', 'Team C', 'Team D', 'Team E'],\n      responsive: [{\n        breakpoint: 480,\n        options: {\n          chart: {\n            width: 200\n          },\n          legend: {\n            position: 'bottom'\n          }\n        }\n      }]\n    }\n  }),\n  watch: {\n    parentData() {\n      if (this.parentData.length > 0) {\n        this.netEarnings();\n      } else {\n        this.dataGraph = [];\n        this.$emit(\"resetComponentValue\", '');\n      }\n    }\n\n  },\n\n  created() {\n    this.netEarnings();\n  },\n\n  methods: {\n    async netEarningsFixedCost() {\n      const itemConsultants = this.parentData.map(v => {\n        return v.co_usuario;\n      });\n      const request = {\n        item_consultants: itemConsultants\n      };\n\n      try {\n        const response = await this.$store.dispatch(\"consultant/CONSULTANT_NET_EARNINGS_FIXED_COST\", request); //response service\n\n        const dataConsultan = response.data;\n        const listSelect = this.parentData;\n        const organizedData = dataConsultan.reduce(function (acumulador, valorActual) {\n          const name = listSelect.find(consultant => {\n            return consultant.co_usuario === valorActual.co_usuario;\n          });\n          let valorActualAssignName = Object.assign({\n            name: name.no_usuario\n          }, valorActual);\n          acumulador[valorActual.co_usuario] = acumulador[valorActualAssignName.co_usuario] || [];\n          acumulador[valorActual.co_usuario].push(valorActualAssignName);\n          return acumulador;\n        }, Object.create(null));\n        let ObjectBar = [];\n        let sumTotal = 0;\n        let countMaxMonth = 0;\n\n        for (let key in organizedData) {\n          let earningsData = [];\n          moment.months().map(month => {\n            let searchMonth = organizedData[key].find(index => {\n              let monthActual = parseInt(moment(index.month).format('M'));\n\n              if (monthActual > countMaxMonth) {\n                countMaxMonth = monthActual;\n              }\n\n              return month == moment(index.month).format('MMMM');\n            });\n\n            if (searchMonth != undefined) {\n              earningsData.push(this.numFormat(searchMonth.total_net_earnings));\n            } else {\n              earningsData.push(0);\n            }\n          });\n          let dataPrepare = {\n            name: organizedData[key][0].name,\n            type: 'column',\n            data: earningsData\n          };\n          ObjectBar.push(dataPrepare);\n          sumTotal += this.finalOperation(organizedData[key], 'fixed_cost');\n        }\n\n        let totalConsultant = Object.keys(organizedData).length;\n        let resulAverage = sumTotal / totalConsultant;\n        let average = Array(countMaxMonth).fill(this.numFormat(resulAverage));\n        ObjectBar.push({\n          name: 'Promedio',\n          type: 'line',\n          data: average\n        });\n        this.$refs.radar.updateOptions({\n          xaxis: {\n            categories: moment.months().slice(0, countMaxMonth)\n          }\n        });\n        this.dataGraph = ObjectBar;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAcA;AAEA;EACAA,qBADA;EAEAC;IACAC;EADA,CAFA;EAKAC;IACAC,4BADA;IAEAC;MACAC;QACAC,UADA;QAEAC;MAFA,CADA;MAKAC,0DALA;MAMAC;QACAC,eADA;QAEAC;UACAN;YACAC;UADA,CADA;UAIAM;YACAC;UADA;QAJA;MAFA;IANA;EAFA,EALA;EA0BAC;IACAC;MACA;QACA;MACA,CAFA,MAGA;QACA;QACA;MACA;IACA;;EATA,CA1BA;;EAqCAC;IACA;EACA,CAvCA;;EAwCAC;IACA;MAEA;QACA;MACA,CAFA;MAIA;QACAC;MADA;;MAIA;QACA,sGADA,CACA;;QAEA;QAEA;QAEA,8EACA;UACA;YACA;UACA,CAFA;UAIA;YAAAC;UAAA;UAEAC;UACAA;UAEA;QAEA,CAbA,EAaAC,mBAbA;QAeA;QACA;QACA;;QAEA,+BACA;UACA;UAEAC;YAEA;cAEA;;cAEA,iCACA;gBACAC;cACA;;cAEA;YACA,CAVA;;YAYA,8BACA;cACAC;YACA,CAHA,MAIA;cACAA;YACA;UACA,CArBA;UAsBA;YACAL,gCADA;YAEAZ,cAFA;YAGAL;UAHA;UAMAuB;UAEAC;QAEA;;QAEA;QACA;QACA;QAEAD;UACAN,gBADA;UAEAZ,YAFA;UAGAL;QAHA;QAMA;UACAyB;YACAC;UADA;QADA;QAMA;MAEA,CAlFA,CAkFA;QACAC;MACA;IACA;;EAhGA;AAxCA","names":["props","components","apexchart","data","series","chartOptions","chart","width","type","labels","responsive","breakpoint","options","legend","position","watch","parentData","created","methods","item_consultants","name","acumulador","Object","moment","countMaxMonth","earningsData","ObjectBar","sumTotal","xaxis","categories","console"],"sourceRoot":"src/components","sources":["GraphPizza.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <apexchart \r\n        type=\"pie\"\r\n        height=\"350\" \r\n        :options=\"chartOptions\" \r\n        :series=\"series\"\r\n        class=\"pt-3 mx-auto\"\r\n      >\r\n      </apexchart>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport VueApexCharts from \"vue-apexcharts\";\r\n\r\nexport default {\r\n  props: ['parentData'],\r\n  components: {\r\n    apexchart: VueApexCharts\r\n  },\r\n  data: () => ({\r\n    series: [44, 55, 13, 43, 22],\r\n    chartOptions: {\r\n    chart: {\r\n        width: 380,\r\n        type: 'pie',\r\n    },\r\n    labels: ['Team A', 'Team B', 'Team C', 'Team D', 'Team E'],\r\n    responsive: [{\r\n        breakpoint: 480,\r\n        options: {\r\n        chart: {\r\n          width: 200\r\n        },\r\n        legend: {\r\n          position: 'bottom'\r\n        }\r\n      }\r\n    }]\r\n    },\r\n  }),\r\n  watch:{\r\n    parentData(){\r\n      if(this.parentData.length > 0) {\r\n        this.netEarnings();\r\n      }\r\n      else{\r\n        this.dataGraph = [];\r\n        this.$emit(\"resetComponentValue\", '');\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.netEarnings();\r\n  },\r\n  methods: {\r\n  async netEarningsFixedCost(){\r\n    \r\n      const itemConsultants = this.parentData.map((v) => {\r\n          return v.co_usuario\r\n      });\r\n\r\n      const request = {\r\n        item_consultants: itemConsultants\r\n      };\r\n\r\n      try {\r\n        const response = await this.$store.dispatch(\"consultant/CONSULTANT_NET_EARNINGS_FIXED_COST\", request);//response service\r\n        \r\n        const dataConsultan = response.data;\r\n\r\n        const listSelect = this.parentData;\r\n\r\n        const organizedData = dataConsultan.reduce(function (acumulador, valorActual)\r\n        {\r\n          const name = listSelect.find((consultant) => { \r\n            return consultant.co_usuario === valorActual.co_usuario;\r\n          });\r\n\r\n          let valorActualAssignName = Object.assign({name:name.no_usuario}, valorActual);\r\n\r\n          acumulador[valorActual.co_usuario] = acumulador[valorActualAssignName.co_usuario] || [];\r\n          acumulador[valorActual.co_usuario].push(valorActualAssignName); \r\n          \r\n          return acumulador;\r\n\r\n        }, Object.create(null));\r\n\r\n        let ObjectBar = [];\r\n        let sumTotal = 0;\r\n        let countMaxMonth = 0;\r\n\r\n        for (let key in organizedData)\r\n        {\r\n          let earningsData = [];\r\n\r\n          moment.months().map((month) => {\r\n\r\n            let searchMonth = organizedData[key].find((index) => {\r\n\r\n              let monthActual = parseInt(moment(index.month).format('M'));\r\n\r\n              if(monthActual > countMaxMonth)\r\n              {\r\n                countMaxMonth = monthActual;\r\n              }\r\n\r\n              return month == moment(index.month).format('MMMM')\r\n            })\r\n\r\n            if(searchMonth != undefined)\r\n            {\r\n              earningsData.push(this.numFormat(searchMonth.total_net_earnings));\r\n            }\r\n            else{\r\n              earningsData.push(0);\r\n            }\r\n          });\r\n          let dataPrepare = {\r\n            name: organizedData[key][0].name,\r\n            type: 'column',\r\n            data: earningsData\r\n          }\r\n\r\n          ObjectBar.push(dataPrepare);\r\n\r\n          sumTotal += this.finalOperation(organizedData[key],'fixed_cost');\r\n\r\n        }\r\n\r\n        let totalConsultant = Object.keys(organizedData).length;\r\n        let resulAverage = sumTotal / totalConsultant;\r\n        let average = Array(countMaxMonth).fill(this.numFormat(resulAverage));\r\n\r\n        ObjectBar.push({\r\n          name: 'Promedio',\r\n          type: 'line',\r\n          data: average\r\n        });\r\n\r\n        this.$refs.radar.updateOptions({\r\n          xaxis:{\r\n            categories: moment.months().slice(0, countMaxMonth)\r\n          }\r\n        });\r\n        \r\n        this.dataGraph = ObjectBar;\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    },\r\n    \r\n },\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}