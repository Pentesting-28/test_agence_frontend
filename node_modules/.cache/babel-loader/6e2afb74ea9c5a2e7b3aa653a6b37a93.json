{"ast":null,"code":"import VueApexCharts from \"vue-apexcharts\";\nimport moment from 'moment';\nimport 'moment/locale/es';\nexport default {\n  components: {\n    apexchart: VueApexCharts\n  },\n  props: ['parentData'],\n  data: () => ({\n    dataGraph: [],\n    series: [{\n      name: 'Income',\n      type: 'column',\n      data: [1.4, 2, 2.5, 1.5, 2.5, 2.8, 3.8, 4.6]\n    }, {\n      name: 'Cashflow',\n      type: 'column',\n      data: [1.1, 3, 3.1, 4, 4.1, 4.9, 6.5, 8.5]\n    }, {\n      name: 'Revenue',\n      type: 'line',\n      data: [20, 29, 37, 36, 44, 45, 50, 58]\n    }],\n    chartOptions: {\n      chart: {\n        height: 350,\n        type: 'line',\n        stacked: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        width: [1, 1, 4]\n      },\n      title: {\n        text: 'XYZ - Stock Analysis (2009 - 2016)',\n        align: 'left',\n        offsetX: 110\n      },\n      xaxis: {\n        // categories: [2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016],\n        categories: moment.months() // max: 130.000,\n\n      },\n      yaxis: [{\n        max: 120.000,\n        axisTicks: {\n          show: true\n        },\n        axisBorder: {\n          show: true,\n          color: '#008FFB'\n        },\n        labels: {\n          style: {\n            colors: '#008FFB'\n          }\n        },\n        title: {\n          text: \"$ GANANCIAS\",\n          style: {\n            color: '#008FFB'\n          }\n        },\n        tooltip: {\n          enabled: true\n        }\n      } // {\n      //   seriesName: 'Income',\n      //   opposite: true,\n      //   axisTicks: {\n      //     show: true,\n      //   },\n      //   axisBorder: {\n      //     show: true,\n      //     color: '#00E396'\n      //   },\n      //   labels: {\n      //     style: {\n      //       colors: '#00E396',\n      //     }\n      //   },\n      //   title: {\n      //     text: \"Operating Cashflow (thousand crores)\",\n      //     style: {\n      //       color: '#00E396',\n      //     }\n      //   },\n      // },\n      // {\n      //   seriesName: 'Revenue',\n      //   opposite: true,\n      //   axisTicks: {\n      //     show: true,\n      //   },\n      //   axisBorder: {\n      //     show: true,\n      //     color: '#FEB019'\n      //   },\n      //   labels: {\n      //     style: {\n      //       colors: '#FEB019',\n      //     },\n      //   },\n      //   title: {\n      //     text: \"Revenue (thousand crores)\",\n      //     style: {\n      //       color: '#FEB019',\n      //     }\n      //   }\n      // },\n      ],\n      tooltip: {\n        fixed: {\n          enabled: true,\n          position: 'topLeft',\n          // topRight, topLeft, bottomRight, bottomLeft\n          offsetY: 30,\n          offsetX: 60\n        }\n      },\n      legend: {\n        horizontalAlign: 'left',\n        offsetX: 40\n      }\n    } //     chartOptions: {\n    //       chart: {\n    //         type: 'bar',\n    //         height: 350\n    //       },\n    //       plotOptions: {\n    //         bar: {\n    //           horizontal: false,\n    //           columnWidth: '55%',\n    //           endingShape: 'rounded'\n    //         },\n    //       },\n    //       dataLabels: {\n    //         enabled: false\n    //       },\n    //       stroke: {\n    //         show: true,\n    //         width: 2,\n    //         colors: ['transparent']\n    //       },\n    //       xaxis: {\n    //         categories: moment.months(),\n    //         max: 130.000,\n    //       },\n    //       yaxis: {\n    //         title: {\n    //           text: '$( Ganancias )'\n    //         },\n    //         max: 130.00000,\n    //         labels:{\n    //           formatter: (value) => { return \"R$ \" + value },\n    //         }\n    //       },\n    //       fill: {\n    //         opacity: 1\n    //       },\n    //       tooltip: {\n    //         y: {\n    //           formatter: function (val) {\n    //             return \"$ \" + val /*+ \"thousands\"*/\n    //           }\n    //         }\n    //       }\n    //     }, \n\n  }),\n  watch: {\n    parentData() {\n      if (this.parentData.length > 0) {\n        this.netEarnings();\n      } else {\n        this.dataGraph = [];\n        this.$emit(\"resetComponentValue\", '');\n      }\n    }\n\n  },\n\n  created() {\n    this.netEarnings();\n  },\n\n  methods: {\n    async netEarnings() {\n      const itemConsultants = this.parentData.map(v => {\n        return v.co_usuario;\n      });\n      const request = {\n        item_consultants: itemConsultants\n      };\n\n      try {\n        const response = await this.$store.dispatch(\"consultant/CONSULTANT_NET_EARNINGS\", request); //response service\n\n        const dataConsultan = response.data;\n        const listSelect = this.parentData;\n        const organizedData = dataConsultan.reduce(function (acumulador, valorActual) {\n          const name = listSelect.find(consultant => {\n            return consultant.co_usuario === valorActual.co_usuario;\n          });\n          let valorActualAssignName = Object.assign({\n            name: name.no_usuario\n          }, valorActual);\n          acumulador[valorActual.co_usuario] = acumulador[valorActualAssignName.co_usuario] || [];\n          acumulador[valorActual.co_usuario].push(valorActualAssignName);\n          return acumulador;\n        }, Object.create(null));\n        let ObjectBar = [];\n        let sumTotal = 0;\n        let average = [];\n        let countMaxMonth = 0;\n\n        for (let key in organizedData) {\n          let earningsData = [];\n          let sizeArray = organizedData[key].length;\n          moment.months().map(month => {\n            let busqueda = organizedData[key].find(index => {\n              return month == moment(index.month).format('MMMM');\n            });\n\n            if (busqueda != undefined) {\n              earningsData.push(this.numFormat(busqueda.total_net_earnings));\n            } else {\n              earningsData.push(0);\n            }\n          });\n          let dataPrepare = {\n            name: organizedData[key][0].name,\n            type: 'column',\n            data: earningsData\n          };\n          ObjectBar.push(dataPrepare);\n          sumTotal += this.finalOperation(organizedData[key], 'fixed_cost');\n\n          if (sizeArray > countMaxMonth) {\n            countMaxMonth = sizeArray;\n          }\n        }\n\n        let totalConsultant = Object.keys(organizedData).length;\n        let resulAverage = [];\n        resulAverage = sumTotal / totalConsultant;\n        console.log(resulAverage); // console.log(countMaxMonth)\n\n        ObjectBar.push({\n          name: 'Promedio',\n          type: 'line',\n          data: [18.22525, 18.22525, 18.22525, 18.22525, 18.22525, 18.22525, 18.22525, 18.22525, 18.22525]\n        }); //27,901 \n        //18,22525\n\n        this.dataGraph = ObjectBar; // console.log(this.dataGraph)\n        // let col = \n        // console.log(this.numFormat(18.22525))\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    finalOperation(arrayObjectcs, key, type = true) {\n      if (!Array.isArray(arrayObjectcs)) {\n        return null;\n      }\n\n      let j = 1;\n      let total = arrayObjectcs[0][key];\n\n      if (!total) {\n        return 0;\n      }\n\n      while (j < arrayObjectcs.length) {\n        if (type) {\n          total += arrayObjectcs[j][key];\n        } else {\n          total -= arrayObjectcs[j][key];\n        }\n\n        j++;\n      }\n\n      return total;\n    },\n\n    numFormat(item) {\n      return new Intl.NumberFormat('de-DE').format(item.toFixed(2));\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA8BA;AACA;AACA;AAEA;EACAA;IACAC;EADA,CADA;EAIAC,qBAJA;EAKAC;IACAC,aADA;IAEAC;MACAC,cADA;MAEAC,cAFA;MAGAJ;IAHA,GAIA;MACAG,gBADA;MAEAC,cAFA;MAGAJ;IAHA,CAJA,EAQA;MACAG,eADA;MAEAC,YAFA;MAGAJ;IAHA,CARA,CAFA;IAeAK;MACAC;QACAC,WADA;QAEAH,YAFA;QAGAI;MAHA,CADA;MAMAC;QACAC;MADA,CANA;MASAC;QACAC;MADA,CATA;MAYAC;QACAC,0CADA;QAEAC,aAFA;QAGAC;MAHA,CAZA;MAiBAC;QACA;QACAC,2BAFA,CAGA;;MAHA,CAjBA;MAsBAC,QAEA;QACAC,YADA;QAEAC;UACAC;QADA,CAFA;QAKAC;UACAD,UADA;UAEAE;QAFA,CALA;QASAC;UACAC;YACAC;UADA;QADA,CATA;QAcAd;UACAC,mBADA;UAEAY;YACAF;UADA;QAFA,CAdA;QAoBAI;UACAlB;QADA;MApBA,CAFA,CA0BA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MArEA,CAtBA;MA6FAkB;QACAC;UACAnB,aADA;UAEAoB,mBAFA;UAEA;UACAC,WAHA;UAIAf;QAJA;MADA,CA7FA;MAqGAgB;QACAC,uBADA;QAEAjB;MAFA;IArGA,CAfA,CAyHA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EApKA,EALA;EA2KAkB;IACAC;MACA;QACA;MACA,CAFA,MAGA;QACA;QACA;MACA;IACA;;EATA,CA3KA;;EAsLAC;IACA;EACA,CAxLA;;EAyLAC;IACA;MACA;QACA;MACA,CAFA;MAGA;QACAC;MADA;;MAGA;QACA,2FADA,CACA;;QAEA;QAEA;QAEA,8EACA;UACA;YACA;UACA,CAFA;UAIA;YAAAnC;UAAA;UAEAoC;UACAA;UAEA;QAEA,CAbA,EAaAC,mBAbA;QAeA;QACA;QACA;QACA;;QAEA,+BACA;UACA;UACA;UAEAC;YAEA;cACA;YACA,CAFA;;YAIA;cACAC;YACA,CAFA,MAGA;cACAA;YACA;UACA,CAZA;UAcA;YACAvC,gCADA;YAEAC,cAFA;YAGAJ;UAHA;UAKA2C;UAEAC;;UAEA;YACAC;UACA;QACA;;QACA;QACA;QACAC;QACAC,0BA9DA,CA+DA;;QACAJ;UACAxC,gBADA;UAEAC,YAFA;UAGAJ;QAHA,GAhEA,CAqEA;QACA;;QACA,2BAvEA,CAwEA;QACA;QACA;MACA,CA3EA,CA2EA;QACA+C;MACA;IACA,CAtFA;;IAuFAC;MAEA;QACA;MACA;;MAEA;MACA;;MAEA;QACA;MACA;;MAEA;QACA;UACAC;QACA,CAFA,MAGA;UACAA;QACA;;QACAC;MACA;;MACA;IACA,CA9GA;;IA+GAC;MACA;IACA;;EAjHA;AAzLA","names":["components","apexchart","props","data","dataGraph","series","name","type","chartOptions","chart","height","stacked","dataLabels","enabled","stroke","width","title","text","align","offsetX","xaxis","categories","yaxis","max","axisTicks","show","axisBorder","color","labels","style","colors","tooltip","fixed","position","offsetY","legend","horizontalAlign","watch","parentData","created","methods","item_consultants","acumulador","Object","moment","earningsData","ObjectBar","sumTotal","countMaxMonth","resulAverage","console","finalOperation","total","j","numFormat"],"sourceRoot":"src/components","sources":["GraphBar.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <!-- <v-card\r\n        elevation=\"6\"\r\n        loading\r\n        outlined\r\n        max-width=\"900\"\r\n        class=\"pt-3 mx-auto\"\r\n      > -->\r\n        <!-- <apexchart \r\n          type=\"bar\"\r\n          height=\"350\" \r\n          :options=\"chartOptions\" \r\n          :series=\"dataGraph\"\r\n          class=\"pt-3 mx-auto\"\r\n        >\r\n        </apexchart> -->\r\n        <apexchart\r\n          type=\"line\"\r\n          height=\"350\"\r\n          :options=\"chartOptions\"\r\n          :series=\"dataGraph\">\r\n        </apexchart>\r\n\r\n      <!-- </v-card> -->\r\n    \r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport VueApexCharts from \"vue-apexcharts\";\r\nimport moment from 'moment';\r\nimport 'moment/locale/es';\r\n\r\nexport default {\r\n  components: {\r\n    apexchart: VueApexCharts\r\n  },\r\n  props: ['parentData'],\r\n  data: () => ({\r\n    dataGraph : [],\r\n    series: [{\r\n      name: 'Income',\r\n      type: 'column',\r\n      data: [1.4, 2, 2.5, 1.5, 2.5, 2.8, 3.8, 4.6]\r\n    }, {\r\n      name: 'Cashflow',\r\n      type: 'column',\r\n      data: [1.1, 3, 3.1, 4, 4.1, 4.9, 6.5, 8.5]\r\n    }, {\r\n      name: 'Revenue',\r\n      type: 'line',\r\n      data: [20, 29, 37, 36, 44, 45, 50, 58]\r\n    }],\r\n    chartOptions: {\r\n      chart: {\r\n        height: 350,\r\n        type: 'line',\r\n        stacked: false\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        width: [1, 1, 4]\r\n      },\r\n      title: {\r\n        text: 'XYZ - Stock Analysis (2009 - 2016)',\r\n        align: 'left',\r\n        offsetX: 110\r\n      },\r\n      xaxis: {\r\n        // categories: [2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016],\r\n        categories: moment.months(),\r\n        // max: 130.000,\r\n      },\r\n      yaxis: [\r\n        \r\n        {\r\n          max: 120.000,\r\n          axisTicks: {\r\n            show: true,\r\n          },\r\n          axisBorder: {\r\n            show: true,\r\n            color: '#008FFB'\r\n          },\r\n          labels: {\r\n            style: {\r\n              colors: '#008FFB',\r\n            }\r\n          },\r\n          title: {\r\n            text: \"$ GANANCIAS\",\r\n            style: {\r\n              color: '#008FFB',\r\n            }\r\n          },\r\n          tooltip: {\r\n            enabled: true\r\n          }\r\n        },\r\n        // {\r\n        //   seriesName: 'Income',\r\n        //   opposite: true,\r\n        //   axisTicks: {\r\n        //     show: true,\r\n        //   },\r\n        //   axisBorder: {\r\n        //     show: true,\r\n        //     color: '#00E396'\r\n        //   },\r\n        //   labels: {\r\n        //     style: {\r\n        //       colors: '#00E396',\r\n        //     }\r\n        //   },\r\n        //   title: {\r\n        //     text: \"Operating Cashflow (thousand crores)\",\r\n        //     style: {\r\n        //       color: '#00E396',\r\n        //     }\r\n        //   },\r\n        // },\r\n        // {\r\n        //   seriesName: 'Revenue',\r\n        //   opposite: true,\r\n        //   axisTicks: {\r\n        //     show: true,\r\n        //   },\r\n        //   axisBorder: {\r\n        //     show: true,\r\n        //     color: '#FEB019'\r\n        //   },\r\n        //   labels: {\r\n        //     style: {\r\n        //       colors: '#FEB019',\r\n        //     },\r\n        //   },\r\n        //   title: {\r\n        //     text: \"Revenue (thousand crores)\",\r\n        //     style: {\r\n        //       color: '#FEB019',\r\n        //     }\r\n        //   }\r\n        // },\r\n      ],\r\n      tooltip: {\r\n        fixed: {\r\n          enabled: true,\r\n          position: 'topLeft', // topRight, topLeft, bottomRight, bottomLeft\r\n          offsetY: 30,\r\n          offsetX: 60\r\n        },\r\n      },\r\n      legend: {\r\n        horizontalAlign: 'left',\r\n        offsetX: 40\r\n      }\r\n    },\r\n//     chartOptions: {\r\n//       chart: {\r\n//         type: 'bar',\r\n//         height: 350\r\n//       },\r\n//       plotOptions: {\r\n//         bar: {\r\n//           horizontal: false,\r\n//           columnWidth: '55%',\r\n//           endingShape: 'rounded'\r\n//         },\r\n//       },\r\n//       dataLabels: {\r\n//         enabled: false\r\n//       },\r\n//       stroke: {\r\n//         show: true,\r\n//         width: 2,\r\n//         colors: ['transparent']\r\n//       },\r\n//       xaxis: {\r\n//         categories: moment.months(),\r\n//         max: 130.000,\r\n//       },\r\n//       yaxis: {\r\n//         title: {\r\n//           text: '$( Ganancias )'\r\n//         },\r\n//         max: 130.00000,\r\n//         labels:{\r\n//           formatter: (value) => { return \"R$ \" + value },\r\n//         }\r\n//       },\r\n//       fill: {\r\n//         opacity: 1\r\n//       },\r\n//       tooltip: {\r\n//         y: {\r\n//           formatter: function (val) {\r\n//             return \"$ \" + val /*+ \"thousands\"*/\r\n//           }\r\n//         }\r\n//       }\r\n//     }, \r\n }),\r\n watch:{\r\n  parentData(){\r\n    if(this.parentData.length > 0) {\r\n      this.netEarnings()\r\n    }\r\n    else{\r\n      this.dataGraph = []\r\n      this.$emit(\"resetComponentValue\", '');\r\n    }\r\n  }\r\n},\r\ncreated() {\r\n  this.netEarnings()\r\n},\r\n methods: {\r\n  async netEarnings(){\r\n      const itemConsultants = this.parentData.map((v) => {\r\n          return v.co_usuario\r\n      });\r\n      const request = {\r\n        item_consultants: itemConsultants\r\n      };\r\n      try {\r\n        const response = await this.$store.dispatch(\"consultant/CONSULTANT_NET_EARNINGS\", request);//response service\r\n        \r\n        const dataConsultan = response.data;\r\n\r\n        const listSelect = this.parentData\r\n\r\n        const organizedData = dataConsultan.reduce(function (acumulador, valorActual)\r\n        {\r\n          const name = listSelect.find((consultant) => { \r\n            return consultant.co_usuario === valorActual.co_usuario\r\n          });\r\n\r\n          let valorActualAssignName = Object.assign({name:name.no_usuario}, valorActual)\r\n\r\n          acumulador[valorActual.co_usuario] = acumulador[valorActualAssignName.co_usuario] || []\r\n          acumulador[valorActual.co_usuario].push(valorActualAssignName); \r\n          \r\n          return acumulador;\r\n\r\n        }, Object.create(null));\r\n\r\n        let ObjectBar = []\r\n        let sumTotal = 0\r\n        let average= [];\r\n        let countMaxMonth = 0\r\n\r\n        for (let key in organizedData)\r\n        {\r\n          let earningsData = [];\r\n          let sizeArray = organizedData[key].length\r\n\r\n          moment.months().map((month) => {\r\n\r\n            let busqueda = organizedData[key].find((index) => {\r\n              return month == moment(index.month).format('MMMM')\r\n            })\r\n\r\n            if(busqueda != undefined){\r\n              earningsData.push(this.numFormat(busqueda.total_net_earnings))\r\n            }\r\n            else{\r\n              earningsData.push(0)\r\n            }\r\n          });\r\n\r\n          let dataPrepare = {\r\n            name: organizedData[key][0].name,\r\n            type: 'column',\r\n            data: earningsData\r\n          }\r\n          ObjectBar.push(dataPrepare)\r\n\r\n          sumTotal += this.finalOperation(organizedData[key],'fixed_cost')\r\n\r\n          if(sizeArray > countMaxMonth){\r\n            countMaxMonth = sizeArray\r\n          }\r\n        }\r\n        let totalConsultant = Object.keys(organizedData).length\r\n        let resulAverage = []\r\n        resulAverage= sumTotal/totalConsultant;\r\n        console.log(resulAverage)\r\n        // console.log(countMaxMonth)\r\n        ObjectBar.push({\r\n          name: 'Promedio',\r\n          type: 'line',\r\n          data: [18.22525, 18.22525, 18.22525, 18.22525, 18.22525, 18.22525, 18.22525, 18.22525, 18.22525]\r\n        })\r\n        //27,901 \r\n        //18,22525\r\n        this.dataGraph = ObjectBar\r\n        // console.log(this.dataGraph)\r\n        // let col = \r\n        // console.log(this.numFormat(18.22525))\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    },\r\n    finalOperation(arrayObjectcs, key, type = true) {\r\n\r\n      if(!Array.isArray(arrayObjectcs)){\r\n        return null;\r\n      }\r\n\r\n      let j = 1;\r\n      let total = arrayObjectcs[0][key];\r\n\r\n      if(!total){\r\n        return 0;\r\n      }\r\n\r\n      while (j< arrayObjectcs.length) {\r\n        if(type){\r\n          total += arrayObjectcs[j][key];\r\n        }\r\n        else{\r\n          total -= arrayObjectcs[j][key];\r\n        }\r\n        j++;\r\n      }\r\n      return total;\r\n    },\r\n    numFormat(item) {\r\n      return new Intl.NumberFormat('de-DE').format(item.toFixed(2));\r\n    },\r\n },\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n  tspan{\r\n    text-transform: capitalize !important;\r\n  }\r\n</style>"]},"metadata":{},"sourceType":"module"}